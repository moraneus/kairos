name: Docker Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  docker-build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
          -t kairos:test \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${{ github.sha }} \
          --build-arg VERSION=${{ github.ref_name }} \
          .

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Test Docker image health
      run: |
        docker run --rm kairos:test python -c "
        import sys
        print(f'✅ Python version: {sys.version}')
        import core, parser, utils
        print('✅ All Kairos modules imported successfully')
        "

    - name: Run pytest inside Docker container
      run: |
        docker run --rm kairos:test python -m pytest tests/ -v --tb=short

    - name: Run pytest with coverage inside Docker
      run: |
        docker run --rm kairos:test python -m pytest tests/ -v \
          --cov=core --cov=parser --cov=utils --cov-report=term-missing

    - name: Test CLI help command
      run: |
        docker run --rm kairos:test python run_monitor.py --help

    - name: Test Docker workspace mounting
      run: |
        # Create test files in temporary directory
        mkdir -p /tmp/kairos-test
        echo "EP(ready)" > /tmp/kairos-test/property.pbtl
        cat > /tmp/kairos-test/trace.csv << EOF
        # system_processes: P1|P2
        eid,processes,vc,props
        ev1,P1,P1:1;P2:0,ready
        ev2,P2,P1:1;P2:1,done
        EOF

        # Test monitoring with volume mount
        docker run --rm \
          -v /tmp/kairos-test:/workspace \
          kairos:test \
          python run_monitor.py \
          -p /workspace/property.pbtl \
          -t /workspace/trace.csv \
          --validate-only

    - name: Test Docker with complex trace
      run: |
        # Create more complex test scenario
        mkdir -p /tmp/kairos-complex
        echo "EP(EP(request) & EP(response))" > /tmp/kairos-complex/property.pbtl
        cat > /tmp/kairos-complex/trace.csv << EOF
        # system_processes: Client|Server
        eid,processes,vc,props
        req,Client|Server,Client:1;Server:1,request
        resp,Server|Client,Client:2;Server:2,response
        EOF

        # Run full monitoring
        docker run --rm \
          -v /tmp/kairos-complex:/workspace \
          kairos:test \
          python run_monitor.py \
          -p /workspace/property.pbtl \
          -t /workspace/trace.csv \
          -v

    - name: Test Docker memory limits
      run: |
        # Test with memory constraints
        docker run --rm --memory=256m \
          kairos:test \
          python -c "
          from core.monitor import PBTLMonitor
          monitor = PBTLMonitor('EP(p)')
          print('✅ Memory-constrained test passed')
          "

    - name: Test Docker environment variables
      run: |
        docker run --rm \
          -e LOG_LEVEL=DEBUG \
          -e PYTHONPATH=/app \
          kairos:test \
          python -c "
          import os
          print(f'LOG_LEVEL: {os.getenv(\"LOG_LEVEL\")}')
          print(f'PYTHONPATH: {os.getenv(\"PYTHONPATH\")}')
          print('✅ Environment variables test passed')
          "

    - name: Test code style in Docker
      run: |
        docker run --rm kairos:test black --check --diff .

    - name: Test import sorting in Docker
      run: |
        docker run --rm kairos:test isort --check-only --diff .

    - name: Test type checking in Docker
      run: |
        docker run --rm kairos:test mypy core/ parser/ utils/ --ignore-missing-imports

    - name: Clean up test files
      if: always()
      run: |
        rm -rf /tmp/kairos-test /tmp/kairos-complex

    - name: Report Docker test results
      if: always()
      run: |
        echo "🐳 Docker tests completed"
        echo "📊 Docker test status: ${{ job.status }}"
        docker images kairos:test